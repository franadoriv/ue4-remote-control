import { UObject } from '../uobject';
import { FString, FName, TMap, FAssetData, UObjectRef } from '../../engine/types';
import { UClass } from '../objects/class';
export declare class EditorAssetLibrary extends UObject {
    constructor();
    CheckoutAsset(AssetToCheckout: FString): Promise<boolean>;
    CheckoutDirectory(DirectoryPath: FString, bRecursive: boolean): Promise<boolean>;
    CheckoutLoadedAsset(AssetToCheckout: UObject): Promise<boolean>;
    CheckoutLoadedAssets(AssetsToCheckout: UObject[]): Promise<boolean>;
    ConsolidateAssets(AssetToConsolidateTo: UObject, AssetsToConsolidate: UObject[]): Promise<boolean>;
    DeleteAsset(AssetPathToDelete: FString): Promise<boolean>;
    DeleteDirectory(DirectoryPath: FString): Promise<boolean>;
    DeleteLoadedAsset(AssetToDelete: UObject): Promise<boolean>;
    DeleteLoadedAssets(AssetsToDelete: UObject[]): Promise<boolean>;
    DoAssetsExist(AssetPaths: FString[]): Promise<boolean>;
    DoesAssetExist(AssetPath: FString): Promise<boolean>;
    DoesDirectoryExist(DirectoryPath: FString): Promise<boolean>;
    DoesDirectoryHaveAssets(DirectoryPath: FString, bRecursive: boolean): Promise<boolean>;
    DuplicateAsset(SourceAssetPath: FString, DestinationAssetPath: FString): Promise<UObjectRef<UObject>>;
    DuplicateDirectory(SourceDirectoryPath: FString, DestinationDirectoryPath: FString): Promise<boolean>;
    DuplicateLoadedAsset(SourceAsset: UObject, DestinationAssetPath: FString): Promise<UObjectRef<UObject>>;
    FindAssetData(AssetPath: FString): Promise<FAssetData>;
    FindPackageReferencersForAsset(AssetPath: FString, bLoadAssetsToConfirm: boolean): Promise<FString[]>;
    GetMetadataTag(Object: UObject, Tag: FName): Promise<FString>;
    GetMetadataTagValues(Object: UObject): Promise<TMap<FName, FString>>;
    GetPathNameForLoadedAsset(LoadedAsset: UObject): Promise<FString>;
    GetTagValues(AssetPath: FString): Promise<TMap<FName, FString>>;
    ListAssetByTagValue(TagName: FName, TagValue: FString): Promise<FString[]>;
    ListAssets(DirectoryPath: FString, bRecursive: boolean, bIncludeFolder: boolean): Promise<FString[]>;
    LoadAsset(AssetPath: FString): Promise<UObjectRef<UObject>>;
    LoadBlueprintClass(AssetPath: FString): Promise<UObjectRef<UClass>>;
    MakeDirectory(DirectoryPath: FString): Promise<boolean>;
    RemoveMetadataTag(Object: UObject, Tag: FName): Promise<void>;
    RenameAsset(SourceAssetPath: FString, DestinationAssetPath: FString): Promise<boolean>;
    RenameDirectory(SourceDirectoryPath: FString, DestinationDirectoryPath: FString): Promise<boolean>;
    RenameLoadedAsset(SourceAsset: UObject, DestinationAssetPath: FString): Promise<boolean>;
    SaveAsset(AssetToSave: FString, bOnlyIfIsDirty: boolean): Promise<boolean>;
    SaveDirectory(DirectoryPath: FString, bOnlyIfIsDirty: boolean, bRecursive: boolean): Promise<boolean>;
    SaveLoadedAsset(AssetToSave: UObject, bOnlyIfIsDirty: boolean): Promise<boolean>;
    SaveLoadedAssets(AssetsToSave: UObject[], bOnlyIfIsDirty: boolean): Promise<boolean>;
    SetMetadataTag(Object: UObject, Tag: FName, Value: FString): Promise<void>;
    SyncBrowserToObjects(AssetPaths: FString[]): Promise<void>;
}
